// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var SocketIOInterop = require("SocketIOInterop");

function encodeMessage(message) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "id",
                message[/* id */0]
              ],
              /* :: */[
                /* tuple */[
                  "senderId",
                  message[/* senderId */2]
                ],
                /* :: */[
                  /* tuple */[
                    "text",
                    message[/* text */3]
                  ],
                  /* :: */[
                    /* tuple */[
                      "creationDate",
                      new Date(message[/* creationDate */1]).toISOString()
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function encodeUser(user) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "id",
                user[/* id */0]
              ],
              /* :: */[
                /* tuple */[
                  "name",
                  user[/* name */1]
                ],
                /* :: */[
                  /* tuple */[
                    "avatarUrl",
                    Json_encode.nullable((function (prim) {
                            return prim;
                          }), user[/* avatarUrl */2])
                  ],
                  /* :: */[
                    /* tuple */[
                      "isAvailable",
                      user[/* isAvailable */3]
                    ],
                    /* :: */[
                      /* tuple */[
                        "isTyping",
                        user[/* isTyping */4]
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function encodeChatState(chatState, userId) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "users",
                Json_encode.list(encodeUser, chatState[/* users */0])
              ],
              /* :: */[
                /* tuple */[
                  "messages",
                  Json_encode.list(encodeMessage, chatState[/* messages */1])
                ],
                /* :: */[
                  /* tuple */[
                    "currentUserId",
                    userId
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function encodeServerEvent(serverEvent) {
  switch (serverEvent.tag | 0) {
    case 0 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      3
                    ],
                    /* :: */[
                      /* tuple */[
                        "chat",
                        encodeChatState(serverEvent[0], serverEvent[1])
                      ],
                      /* [] */0
                    ]
                  ]);
    case 1 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      1
                    ],
                    /* :: */[
                      /* tuple */[
                        "user",
                        encodeUser(serverEvent[0])
                      ],
                      /* [] */0
                    ]
                  ]);
    case 2 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      0
                    ],
                    /* :: */[
                      /* tuple */[
                        "userId",
                        serverEvent[0][/* id */0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 3 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      2
                    ],
                    /* :: */[
                      /* tuple */[
                        "message",
                        encodeMessage(serverEvent[0])
                      ],
                      /* [] */0
                    ]
                  ]);
    
  }
}

function decodeClientCommand(json) {
  var match = Json_decode.field("type", Json_decode.$$int, json);
  switch (match) {
    case 0 : 
        return /* Login */Block.__(1, [Json_decode.field("userName", Json_decode.string, json)]);
    case 1 : 
        return /* Logout */0;
    case 2 : 
        return /* PublishMessage */Block.__(0, [Json_decode.field("text", Json_decode.string, json)]);
    default:
      return /* Logout */0;
  }
}

function startServer(handleClientEvent) {
  SocketIOInterop.startServer(/* array */[
        "customEvent",
        "disconnect"
      ], (function (clientAuthentication, eventName, data, rawBroadcaster, rawSender) {
          var match = eventName === "disconnect";
          return Curry._4(handleClientEvent, clientAuthentication, match ? undefined : decodeClientCommand(data), (function (x) {
                        return Curry._2(rawBroadcaster, encodeServerEvent(x), "customEvent");
                      }), (function (x) {
                        return Curry._2(rawSender, encodeServerEvent(x), "customEvent");
                      }));
        }));
  return /* () */0;
}

exports.encodeMessage = encodeMessage;
exports.encodeUser = encodeUser;
exports.encodeChatState = encodeChatState;
exports.encodeServerEvent = encodeServerEvent;
exports.decodeClientCommand = decodeClientCommand;
exports.startServer = startServer;
/* Json_encode Not a pure module */
