// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");

function createAvatarUrl(key) {
  return "https://robohash.org/" + (String(key) + "?size=128x128");
}

function getNewListIndex(items) {
  return List.length(items) + 1 | 0;
}

function createUser(id, name) {
  return /* record */[
          /* id */id,
          /* name */name,
          /* avatarUrl */createAvatarUrl(name),
          /* isAvailable */false,
          /* isTyping */false
        ];
}

function createMessage(id, text, senderId) {
  return /* record */[
          /* id */id,
          /* creationDate */Date.now(),
          /* senderId */senderId,
          /* text */text
        ];
}

function getOrCreateUser(name, users) {
  var findUserByName = function (x) {
    return x[/* name */1] === name;
  };
  var existingUser = Belt_List.getBy(users, findUserByName);
  if (existingUser !== undefined) {
    return /* tuple */[
            existingUser,
            users
          ];
  } else {
    var user = createUser(List.length(users) + 1 | 0, name);
    return /* tuple */[
            user,
            /* :: */[
              user,
              users
            ]
          ];
  }
}

function changeUserAvailability(isAvailable, id, users) {
  var findUserById = function (x) {
    return x[/* id */0] === id;
  };
  var existingUser = Belt_List.getBy(users, findUserById);
  if (existingUser !== undefined) {
    var user = existingUser;
    return /* :: */[
            /* record */[
              /* id */user[/* id */0],
              /* name */user[/* name */1],
              /* avatarUrl */user[/* avatarUrl */2],
              /* isAvailable */isAvailable,
              /* isTyping */user[/* isTyping */4]
            ],
            List.filter((function (x) {
                      return x[/* id */0] !== id;
                    }))(users)
          ];
  } else {
    return users;
  }
}

function addMessage(text, senderId, messages) {
  var message = createMessage(List.length(messages) + 1 | 0, text, senderId);
  return /* tuple */[
          message,
          /* :: */[
            message,
            messages
          ]
        ];
}

exports.createAvatarUrl = createAvatarUrl;
exports.getNewListIndex = getNewListIndex;
exports.createUser = createUser;
exports.createMessage = createMessage;
exports.getOrCreateUser = getOrCreateUser;
exports.changeUserAvailability = changeUserAvailability;
exports.addMessage = addMessage;
/* No side effect */
